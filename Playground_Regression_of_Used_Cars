{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4d8bda53",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:28.358332Z",
     "iopub.status.busy": "2024-09-29T06:03:28.357887Z",
     "iopub.status.idle": "2024-09-29T06:03:29.424985Z",
     "shell.execute_reply": "2024-09-29T06:03:29.423722Z"
    },
    "papermill": {
     "duration": 1.077633,
     "end_time": "2024-09-29T06:03:29.427935",
     "exception": false,
     "start_time": "2024-09-29T06:03:28.350302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e9/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e9/train.csv\n",
      "/kaggle/input/playground-series-s4e9/test.csv\n",
      "/kaggle/input/used-car-price-prediction/__results__.html\n",
      "/kaggle/input/used-car-price-prediction/__resultx__.html\n",
      "/kaggle/input/used-car-price-prediction/__notebook__.ipynb\n",
      "/kaggle/input/used-car-price-prediction/__output__.json\n",
      "/kaggle/input/used-car-price-prediction/custom.css\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___50_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___38_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___93_0.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___45_0.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___77_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___68_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___48_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___43_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___58_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___41_0.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___96_0.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___63_1.png\n",
      "/kaggle/input/used-car-price-prediction/__results___files/__results___94_0.png\n",
      "/kaggle/input/used-car-price-prediction-dataset/used_cars.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c00833b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:29.441877Z",
     "iopub.status.busy": "2024-09-29T06:03:29.441184Z",
     "iopub.status.idle": "2024-09-29T06:03:46.887508Z",
     "shell.execute_reply": "2024-09-29T06:03:46.886233Z"
    },
    "papermill": {
     "duration": 17.456502,
     "end_time": "2024-09-29T06:03:46.890457",
     "exception": false,
     "start_time": "2024-09-29T06:03:29.433955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.callbacks import EarlyStopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c0a4322",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:46.903332Z",
     "iopub.status.busy": "2024-09-29T06:03:46.902584Z",
     "iopub.status.idle": "2024-09-29T06:03:49.653618Z",
     "shell.execute_reply": "2024-09-29T06:03:49.652264Z"
    },
    "papermill": {
     "duration": 2.761356,
     "end_time": "2024-09-29T06:03:49.657233",
     "exception": false,
     "start_time": "2024-09-29T06:03:46.895877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import re\n",
    "\n",
    "import lightgbm as lgb\n",
    "from lightgbm import log_evaluation, early_stopping\n",
    "from catboost import CatBoostRegressor, Pool\n",
    "\n",
    "from sklearn.svm import SVR\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "from matplotlib.colors import LinearSegmentedColormap\n",
    "import lightgbm as lgb\n",
    "from xgboost import XGBRegressor\n",
    "from lightgbm import log_evaluation, early_stopping\n",
    "from catboost import CatBoostRegressor, Pool\n",
    "\n",
    "import random\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "import optuna\n",
    "\n",
    "USE_OPTUNA = False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d03c12c1",
   "metadata": {
    "papermill": {
     "duration": 0.005209,
     "end_time": "2024-09-29T06:03:49.668130",
     "exception": false,
     "start_time": "2024-09-29T06:03:49.662921",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "da336a52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:49.681516Z",
     "iopub.status.busy": "2024-09-29T06:03:49.680673Z",
     "iopub.status.idle": "2024-09-29T06:03:51.574456Z",
     "shell.execute_reply": "2024-09-29T06:03:51.572996Z"
    },
    "papermill": {
     "duration": 1.903812,
     "end_time": "2024-09-29T06:03:51.577352",
     "exception": false,
     "start_time": "2024-09-29T06:03:49.673540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')\n",
    "Original = pd.read_csv('/kaggle/input/used-car-price-prediction-dataset/used_cars.csv')\n",
    "\n",
    "\n",
    "Original[['milage', 'price']] = Original[['milage', 'price']].map(\n",
    "    lambda x: int(''.join(re.findall(r'\\d+', x))))\n",
    "\n",
    "train = pd.concat([train, Original], ignore_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49b677b9",
   "metadata": {
    "papermill": {
     "duration": 0.00487,
     "end_time": "2024-09-29T06:03:51.587522",
     "exception": false,
     "start_time": "2024-09-29T06:03:51.582652",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1ad64b51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:51.600153Z",
     "iopub.status.busy": "2024-09-29T06:03:51.599577Z",
     "iopub.status.idle": "2024-09-29T06:03:51.625788Z",
     "shell.execute_reply": "2024-09-29T06:03:51.624382Z"
    },
    "papermill": {
     "duration": 0.03575,
     "end_time": "2024-09-29T06:03:51.628505",
     "exception": false,
     "start_time": "2024-09-29T06:03:51.592755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>brand</th>\n",
       "      <th>model</th>\n",
       "      <th>model_year</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>engine</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>clean_title</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>MINI</td>\n",
       "      <td>Cooper S Base</td>\n",
       "      <td>2007</td>\n",
       "      <td>213000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>A/T</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>Lincoln</td>\n",
       "      <td>LS V8</td>\n",
       "      <td>2002</td>\n",
       "      <td>143250</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>A/T</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Beige</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>Silverado 2500 LT</td>\n",
       "      <td>2002</td>\n",
       "      <td>136731</td>\n",
       "      <td>E85 Flex Fuel</td>\n",
       "      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n",
       "      <td>A/T</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>13900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Genesis</td>\n",
       "      <td>G90 5.0 Ultimate</td>\n",
       "      <td>2017</td>\n",
       "      <td>19500</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>Transmission w/Dual Shift Mode</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>45000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>Metris Base</td>\n",
       "      <td>2021</td>\n",
       "      <td>7388</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>7-Speed A/T</td>\n",
       "      <td>Black</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>97500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    id          brand              model  model_year  milage      fuel_type  \\\n",
       "0  0.0           MINI      Cooper S Base        2007  213000       Gasoline   \n",
       "1  1.0        Lincoln              LS V8        2002  143250       Gasoline   \n",
       "2  2.0      Chevrolet  Silverado 2500 LT        2002  136731  E85 Flex Fuel   \n",
       "3  3.0        Genesis   G90 5.0 Ultimate        2017   19500       Gasoline   \n",
       "4  4.0  Mercedes-Benz        Metris Base        2021    7388       Gasoline   \n",
       "\n",
       "                                              engine  \\\n",
       "0       172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n",
       "1       252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n",
       "2  320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n",
       "3       420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n",
       "4       208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n",
       "\n",
       "                     transmission ext_col int_col  \\\n",
       "0                             A/T  Yellow    Gray   \n",
       "1                             A/T  Silver   Beige   \n",
       "2                             A/T    Blue    Gray   \n",
       "3  Transmission w/Dual Shift Mode   Black   Black   \n",
       "4                     7-Speed A/T   Black   Beige   \n",
       "\n",
       "                                 accident clean_title  price  \n",
       "0                           None reported         Yes   4200  \n",
       "1  At least 1 accident or damage reported         Yes   4999  \n",
       "2                           None reported         Yes  13900  \n",
       "3                           None reported         Yes  45000  \n",
       "4                           None reported         Yes  97500  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5b3e335b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:51.641719Z",
     "iopub.status.busy": "2024-09-29T06:03:51.641227Z",
     "iopub.status.idle": "2024-09-29T06:03:51.646874Z",
     "shell.execute_reply": "2024-09-29T06:03:51.645727Z"
    },
    "papermill": {
     "duration": 0.016177,
     "end_time": "2024-09-29T06:03:51.650362",
     "exception": false,
     "start_time": "2024-09-29T06:03:51.634185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(192542, 13)\n"
     ]
    }
   ],
   "source": [
    "print(train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "957e5e28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:51.664546Z",
     "iopub.status.busy": "2024-09-29T06:03:51.663427Z",
     "iopub.status.idle": "2024-09-29T06:03:51.874181Z",
     "shell.execute_reply": "2024-09-29T06:03:51.872318Z"
    },
    "papermill": {
     "duration": 0.220842,
     "end_time": "2024-09-29T06:03:51.876986",
     "exception": false,
     "start_time": "2024-09-29T06:03:51.656144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 192542 entries, 0 to 192541\n",
      "Data columns (total 13 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            188533 non-null  float64\n",
      " 1   brand         192542 non-null  object \n",
      " 2   model         192542 non-null  object \n",
      " 3   model_year    192542 non-null  int64  \n",
      " 4   milage        192542 non-null  int64  \n",
      " 5   fuel_type     187289 non-null  object \n",
      " 6   engine        192542 non-null  object \n",
      " 7   transmission  192542 non-null  object \n",
      " 8   ext_col       192542 non-null  object \n",
      " 9   int_col       192542 non-null  object \n",
      " 10  accident      189977 non-null  object \n",
      " 11  clean_title   170527 non-null  object \n",
      " 12  price         192542 non-null  int64  \n",
      "dtypes: float64(1), int64(3), object(9)\n",
      "memory usage: 19.1+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e9c8f41",
   "metadata": {
    "papermill": {
     "duration": 0.005577,
     "end_time": "2024-09-29T06:03:51.888607",
     "exception": false,
     "start_time": "2024-09-29T06:03:51.883030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Null Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cb667286",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:51.903321Z",
     "iopub.status.busy": "2024-09-29T06:03:51.902067Z",
     "iopub.status.idle": "2024-09-29T06:03:52.101558Z",
     "shell.execute_reply": "2024-09-29T06:03:52.100350Z"
    },
    "papermill": {
     "duration": 0.209891,
     "end_time": "2024-09-29T06:03:52.104382",
     "exception": false,
     "start_time": "2024-09-29T06:03:51.894491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               4009\n",
       "brand               0\n",
       "model               0\n",
       "model_year          0\n",
       "milage              0\n",
       "fuel_type        5253\n",
       "engine              0\n",
       "transmission        0\n",
       "ext_col             0\n",
       "int_col             0\n",
       "accident         2565\n",
       "clean_title     22015\n",
       "price               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b529f680",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T06:03:52.119663Z",
     "iopub.status.busy": "2024-09-29T06:03:52.119215Z",
     "iopub.status.idle": "2024-09-29T06:04:10.510144Z",
     "shell.execute_reply": "2024-09-29T06:04:10.508692Z"
    },
    "papermill": {
     "duration": 18.40256,
     "end_time": "2024-09-29T06:04:10.513086",
     "exception": false,
     "start_time": "2024-09-29T06:03:52.110526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Custom color palette\n",
    "custom_palette = ['#FF6F61', '#FFAB40']\n",
    "\n",
    "# Create a custom colormap\n",
    "cmap = LinearSegmentedColormap.from_list(\"custom_cmap\", custom_palette, N=256)\n",
    "\n",
    "# Sample data for null values heatmap\n",
    "train_null_values = train.sample(100_000).drop(columns=['price']).isnull().T\n",
    "test_null_values = test.sample(100_000).isnull().T\n",
    "\n",
    "# Plotting the heatmaps\n",
    "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 7))\n",
    "\n",
    "sns.heatmap(train_null_values, cbar=False, cmap=cmap, ax=axes[0])\n",
    "axes[0].set_title('Train')\n",
    "axes[0].set_xticks([]) \n",
    "axes[0].set_xlabel('')\n",
    "\n",
    "sns.heatmap(test_null_values, cbar=False, cmap=cmap, ax=axes[1])\n",
    "axes[1].set_title('Test')\n",
    "axes[1].set_xticks([]) \n",
    "axes[1].set_xlabel('')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "858f4fb6",
   "metadata": {
    "papermill": {
     "duration": 0.006728,
     "end_time": "2024-09-29T06:04:10.526510",
     "exception": false,
     "start_time": "2024-09-29T06:04:10.519782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 9057646,
     "sourceId": 76728,
     "sourceType": "competition"
    },
    {
     "datasetId": 3742543,
     "sourceId": 6478229,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 38607880,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 47.401324,
   "end_time": "2024-09-29T06:04:12.461086",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-29T06:03:25.059762",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
